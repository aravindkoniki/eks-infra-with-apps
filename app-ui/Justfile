# Variables
AWS_REGION := "eu-west-1"
AWS_ACCOUNT_ID := 'aws sts get-caller-identity --query Account --output text --profile MY_NETWORKING'

# Create ECR repositories and get their URIs
create-ecr:
	@echo "Creating ECR repositories..."
	@echo "Creating ui-app1 repository..."
	aws ecr create-repository --repository-name ui-app1 --region {{AWS_REGION}} --image-scanning-configuration scanOnPush=true --profile MY_NETWORKING || echo "ui-app1 repository already exists"
	@echo "Creating ui-app2 repository..."
	aws ecr create-repository --repository-name ui-app2 --region {{AWS_REGION}} --image-scanning-configuration scanOnPush=true --profile MY_NETWORKING || echo "ui-app2 repository already exists"
	@echo "ECR repositories created successfully!"
	@echo ""
	@echo "Repository URIs:"
	@aws ecr describe-repositories --repository-names ui-app1 ui-app2 --region {{AWS_REGION}} --query 'repositories[].{Name:repositoryName,URI:repositoryUri}' --output table --profile MY_NETWORKING

# List ECR repositories
list-ecr:
	@echo "Listing ECR repositories..."
	aws ecr describe-repositories --region {{AWS_REGION}} --query 'repositories[?contains(repositoryName, 'ui-app')].{Name:repositoryName,URI:repositoryUri,Created:createdAt}' --output table --profile MY_NETWORKING

# Get ECR repository URIs
get-ecr-uris:
	@echo "ECR Repository URIs:"
	@printf "ui-app1: " && (aws ecr describe-repositories --repository-names ui-app1 --region {{AWS_REGION}} --query 'repositories[0].repositoryUri' --output text --profile MY_NETWORKING 2>/dev/null || echo 'Repository not found')
	@printf "ui-app2: " && (aws ecr describe-repositories --repository-names ui-app2 --region {{AWS_REGION}} --query 'repositories[0].repositoryUri' --output text --profile MY_NETWORKING 2>/dev/null || echo 'Repository not found')

# Delete ECR repositories (use with caution!)
delete-ecr:
	@echo "Deleting ECR repositories..."
	@echo "This will delete all images in the repositories!"
	@read -p "Are you sure? (y/N): " confirm && [ "$$confirm" = "y" ] || exit 1
	aws ecr delete-repository --repository-name ui-app1 --region {{AWS_REGION}} --force --profile MY_NETWORKING || echo "ui-app1 repository doesn't exist"
	aws ecr delete-repository --repository-name ui-app2 --region {{AWS_REGION}} --force --profile MY_NETWORKING || echo "ui-app2 repository doesn't exist"
	@echo "ECR repositories deleted!"

# Login to AWS ECR
login:
	@echo "Logging in to AWS ECR..."
	aws ecr get-login-password --region {{AWS_REGION}} --profile MY_NETWORKING | docker login --username AWS --password-stdin {{AWS_ACCOUNT_ID}}.dkr.ecr.{{AWS_REGION}}.amazonaws.com

# Build images
build-ui-app1:
	@echo "Building ui-app1..."
	docker build -t ui-app1:latest ./ui-app1

build-ui-app2:
	@echo "Building ui-app2..."
	docker build -t ui-app2:latest ./ui-app2

# Test locally
test-ui-app1:
	docker run -d --rm -p 3000:80 --name ui-app1-test ui-app1:latest
	@echo "ui-app1 running at http://localhost:3000"

test-ui-app2:
	docker run -d --rm -p 3001:80 --name ui-app2-test ui-app2:latest
	@echo "ui-app2 running at http://localhost:3001"

# Test both apps
test-all: build-ui-app1 build-ui-app2
	@echo "Starting both applications..."
	docker run -d --rm -p 3000:80 --name ui-app1-test ui-app1:latest
	docker run -d --rm -p 3001:80 --name ui-app2-test ui-app2:latest
	@echo "ui-app1 running at http://localhost:3000"
	@echo "ui-app2 running at http://localhost:3001"

# Stop test containers
stop-test:
	@echo "Stopping test containers..."
	-docker stop ui-app1-test ui-app2-test
	@echo "Test containers stopped"

# Open in browser (Mac only)
open-ui-app1:
	open http://localhost:3000

open-ui-app2:
	open http://localhost:3001

# Curl endpoints
curl-ui-app1:
	curl -i http://localhost:3000

curl-ui-app2:
	curl -i http://localhost:3001

# Test hostname endpoints
curl-hostname-ui-app1:
	curl http://localhost:3000/hostname

curl-hostname-ui-app2:
	curl http://localhost:3001/hostname

# Tag and Push to ECR
push-ui-app1: create-ecr login build-ui-app1
	@echo "Pushing ui-app1 to ECR..."
	@ECR_URI=$$(aws ecr describe-repositories --repository-names ui-app1 --region {{AWS_REGION}} --query 'repositories[0].repositoryUri' --output text --profile MY_NETWORKING) && \
	docker tag ui-app1:latest $$ECR_URI:latest && \
	docker push $$ECR_URI:latest && \
	echo "Successfully pushed to $$ECR_URI:latest"

push-ui-app2: create-ecr login build-ui-app2
	@echo "Pushing ui-app2 to ECR..."
	@ECR_URI=$$(aws ecr describe-repositories --repository-names ui-app2 --region {{AWS_REGION}} --query 'repositories[0].repositoryUri' --output text --profile MY_NETWORKING) && \
	docker tag ui-app2:latest $$ECR_URI:latest && \
	docker push $$ECR_URI:latest && \
	echo "Successfully pushed to $$ECR_URI:latest"

# Build & Push both
push-all: push-ui-app1 push-ui-app2

# Build both images
build-all: build-ui-app1 build-ui-app2

# Clean up local images
clean:
	@echo "Cleaning up local images..."
	-docker rmi ui-app1:latest ui-app2:latest
	@echo "Local images cleaned"

# Remove all Docker images (including unused ones)
clean-all:
	@echo "Removing all Docker images..."
	-docker image prune -a -f
	@echo "All unused Docker images removed"

# Show running containers
ps:
	docker ps --filter "name=ui-app"

# Show logs for test containers
logs-ui-app1:
	docker logs ui-app1-test

logs-ui-app2:
	docker logs ui-app2-test

# Complete local development workflow
dev: build-all test-all
	@echo "Development environment ready!"
	@echo "ui-app1: http://localhost:3000"
	@echo "ui-app2: http://localhost:3001"
	@echo "Run 'just stop-test' to stop containers"

# Help
help:
	@echo "Available commands:"
	@echo "  create-ecr        - Create ECR repositories for ui-app1 and ui-app2"
	@echo "  list-ecr          - List ECR repositories"
	@echo "  get-ecr-uris      - Get ECR repository URIs"
	@echo "  delete-ecr        - Delete ECR repositories (with confirmation)"
	@echo "  login             - Login to AWS ECR"
	@echo "  build-ui-app1     - Build ui-app1 Docker image"
	@echo "  build-ui-app2     - Build ui-app2 Docker image"
	@echo "  build-all         - Build both images"
	@echo "  test-ui-app1      - Run ui-app1 locally on port 3000"
	@echo "  test-ui-app2      - Run ui-app2 locally on port 3001"
	@echo "  test-all          - Run both apps locally"
	@echo "  stop-test         - Stop test containers"
	@echo "  dev               - Complete development setup"
	@echo "  ps                - Show running containers"
	@echo "  logs-ui-app1      - Show logs for ui-app1"
	@echo "  logs-ui-app2      - Show logs for ui-app2"
	@echo "  push-ui-app1      - Push ui-app1 to ECR"
	@echo "  push-ui-app2      - Push ui-app2 to ECR"
	@echo "  push-all          - Push both to ECR"
	@echo "  clean             - Clean up local images"
	@echo "  clean-all         - Remove all unused Docker images"